package blur

var CameraDirX float
var CameraDirY float
var CameraDirZ float
var CameraPosX float
var CameraPosY float
var CameraPosZ float
var LightAbsorptionR float
var LightAbsorptionG float
var LightAbsorptionB float

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
    // Sample input textures
    normalFromCamera := imageSrc0At(texCoord).rgb * 2.0 - 1.0 // Normals [-1,1]
    particleDensity := imageSrc1At(texCoord) // 0 no particles, darker is less particles (linear scale)
    distanceToSurface := imageSrc2At(texCoord).r // darker is farther from surface (linear scale)

    // Camera direction vector
    cameraDir := vec3(CameraDirX, CameraDirY, CameraDirZ)
    
    // Calculate view-dependent effects
    viewDotNormal := dot(normalize(cameraDir), normalize(normalFromCamera))
    
    // Base water color (blue-green) - Fix: values should be 0.0-1.0
    baseWaterColor := vec3(0.2, 0.6, 0.9)
    
    // Calculate attenuation based on distance and particles
    // densityFactor := 1.0 - particleDensity.r
    distanceFactor := distanceToSurface
    
    // Simple color mixing instead of exponential absorption
    deepWaterColor := vec3(0.1, 0.3, 0.6)
    waterColor := mix(baseWaterColor, deepWaterColor, distanceFactor * 0.5)
    
    // Add particle scattering effect (increase intensity)
    scatteringEffect := particleDensity.r * 0.3
    scatteredLight := vec3(0.8, 0.9, 1.0) * scatteringEffect
    
    // Fresnel-like effect based on viewing angle (increase base reflection)
    fresnel := pow(1.0 - abs(viewDotNormal), 2.0)
    surfaceReflection := vec3(0.9, 0.95, 1.0) * fresnel * 0.2
    
    // Combine all effects
    finalColor := waterColor + scatteredLight + surfaceReflection
    
    // Clamp to valid range
    finalColor = clamp(finalColor, 0.0, 1.0)
    
    // Much more opaque alpha
    alpha := 0.9
    
    return vec4(finalColor, alpha)
}